#include <stdio.h>
#define size 5 

/*I'm using this code function declaration and function call
  because I'm much more comfortable to give an explanation.
  Also I have an extra code and it was converted into non functions*/
    
    //Global variables
    int queue[size]; 
    int top = -1;
    int data, choice, min, max, dequeue, enqueue;
    
/*Enqueue to place something into a queue; 
  to add an element to the tail of a queue*/
/*If the content of an array is full
  it will display "Your queue is full."*/
/*Note that we need to increment the value of top by 1 
  for us to feel the changes*/
/*Note the we use if and else statement so that 
  it will only execute the program whether the condition is true or false */
//if the queue is full there will be no incrementation to our variable top
//function declaration 
void Enqueue() {
/*note that the value of our top 
     updates everytime pop and push operations called.*/
    if(top<size-1) {
        //true
        top = top + 1;
        //to add space where the elements to be stored  
        printf("Enqueue: ");
        scanf("%d",&data);
        //data inputted
        enqueue = data;
        //the last element inputted was stored in enqueue
        queue[top] = data;
        //data was stored inside the array.
         
        //to display of your screen
         printf("You enqueued element %d.\n", enqueue);

    } else {  
        //false 
        printf("Your queue is full.\n");
   
    }
}

/*Dequeue to take something out of a queue;
  to remove the first available element 
  from the head of a queue.*/
/*If the content of an array is empty
  it will display "Your queue is empty."*/
/*Note that we need to decrement the value of top by 1 
  for us to feel the changes*/
/*Note that we use if and else statement so that 
  it will only execute the program whether the 
  condition is true or false */
//if the queue is empty there will be no decrementation to our variable top 
//function declaration
void Dequeue() {
    if(top>=0) {
        //true
        //before it was removed we stored the value to enqueue variable
        //queue[0] is our first element
        //therefore the first element was stored in dequeue
        dequeue = queue[0];
        //to display of your screen
        printf("You dequeued element %d.\n", dequeue);
      for(int i=0; i<top; i++) {
        //removing the head
        queue[i]=queue[i+1];
      }      
        top = top - 1;
        //to remove the extra space with no elements
                                 
    } else {
        //false
        printf("Your queue is empty.\n");
    }          
}

//If there's no remaining elements it will display NONE.
/*Note the we use if and else statement so that 
  it will only execute the program if the 
  condition is true or false */
/*Get the value of the head of the queue 
  without removing it*/
//function declaration
void Peek() {
/*note that the value of our top 
     updates everytime pop and push operations called.*/
   if(top>=0) {
        //true
        //Head element value
        //to be deleted
     printf("Head value of your queue is %d.",queue[0]);
      
   } else {
        //false
        //display NONE if there's no element
        printf("Your Queue: NONE");
   }     
        printf("\n");       
}

//If there's no remaining elements it will display NONE.
/*Note the we use if and else statement so that 
  it will only execute the program if the 
  condition is true or false */
//To see the results of your queue
//function declaration
void Display() {
        /*note that the value of our top 
     updates everytime pop and push operations called.*/   
      if (top>=0) {    
          printf("Your Queue:");
          for(int i=0;i<=top; i++) {  
            //to display your updated queue
            printf(" %d ",queue[i]);
          }         
      } else if (top<0) {   
        printf("Your Queue: NONE");    
     }
        printf("\n"); 

}

//to determine your stack whether Empty or Not.
/*Note the we use if and else statement so that 
  it will only execute the program if the 
  condition is true or false */
//function declaration
void isEmpty() {
      //the min variable will get the value of our top 
       min=top;
      /*note that the value of our top 
     updates everytime pop and push operations called.*/
       //if min is less than 0 then it proves that our condition is true
     if (min<0) {
      //true
      //Display True indicates that your queue is empty.
      printf("True\n");
    } else {
      //false
      //Display False indicates that your queue is filled with an elements.
      printf("False\n");
    }
}
//to determine your stack whether Full or Not.
/*Note the we use if and else statement so that 
  it will only execute the program if the 
  condition is true or false */
//function declaration
void isFull() {
      //the value of our size is 5
      //therefore the value of our max is 4 since our size was subtracted by 1 
       max=size-1;
      //if top is greater than or equal to 4 then it proves that our condition is true
      /*note that the value of our top 
     updates everytime pop and push operations called.*/
    if (top>=max) {
      //true
      //Display True indicates that your queue is Full.
      printf("True\n");
    } else {
      //false
      //Display False indicates that your queue is not yet full.
      printf("False\n");
    }
}

int main (void) {

   do {

    //Let's display our options/operations
    printf("\nQueue Operations\n");
    printf("1. Enqueue()\n");
    printf("2. Dequeue()\n");
    printf("3. Peek()\n");
    printf("4. isFull()\n");
    printf("5. isEmpty()\n");
    printf("6. Display()\n");
    printf("7. Quit\n");
    printf("Select Operation (1-7): ");
    scanf("%d",&choice);
 
/*This is our queue operations;
  let the user choose what operation they want*/
/*We use break statement so that 
  it won't allow to execute the next operations*/
/*If the user input 7 the program display "Thank You!" and the program ends.
/*If it's none of the choices it will display 
  "Error! Please try again." and the program ends*/
/*case 7 is our Safe Exit*/
/*inside the codeblocks of our switch case statement 
  that is our function call through calling each function
  it allows us to run the program of the said operation.*/
/*We can also convert in into non function but I do prefer 
  to be like this for better understanding especially 
  if someone read my works*/  
   switch(choice) {  
        case 1: Enqueue(); break;  
        case 2: Dequeue(); break;
        case 3:    Peek(); break;
        case 4:  isFull(); break; 
        case 5: isEmpty(); break;
        case 6: Display(); break;
        case 7:  printf("\nThank You! \n\n");
                  exit(0); break;
      default :  printf("\nError: Please try again!\n");
    }
    
   } while(choice>0 && choice<=7);
  //We have an available options from 1-7
 /*We set a condition so that 
   it will only runs the program 
   if the inputted value of choice is valid.*/
}    